package com.cdm.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import com.aventstack.extentreports.ExtentTest;
import com.cdm.common.CommonActions;

public class DeploymentsPage extends CommonActions {

	public DeploymentsPage(WebDriver driver, ExtentTest logger) // created WebDriver Constructor
	{
		super(driver, logger);

		PageFactory.initElements(driver, this);
	}

	@FindBy(xpath = "//body/app-root[1]/app-root[1]/app-home[1]/mat-sidenav-container[1]/mat-sidenav-content[1]/div[2]/div[1]/app-deployement-app[1]/div[1]/div[1]/div[1]/img[2]")
	WebElement bulkDownloadImage;

	@FindBy(css = ".cdk-overlay-backdrop-showing")
	WebElement backDropShowing;

	@FindBy(css = ".cdk-overlay-backdrop-showing")
	WebElement backDropTransparent;

	@FindBy(xpath = "//table[@matsortactive='created']")

	WebElement deploymentTable;

	@FindBy(xpath = "//input[@name='devicename']")

	WebElement EdgeNameDeploymentInput;

	@FindBy(xpath = "//input[@name='appname']")

	WebElement EdgeAppNameDeploymentInput;

	@FindBy(xpath = "//span[contains(text(),'Deployments')]")
	WebElement deployment_tab;

	@FindBy(css = ".nav li:nth-of-type(2) [data-toggle]")
	WebElement deploymenttoggle;

	@FindBy(xpath = "//img[@class='mat-tooltip-trigger ml-1 ng-star-inserted']")
	WebElement view_eye_btn;

	@FindBy(xpath = "//h3[@class='titleHeading']")
	WebElement Deploy_heading;

	@FindBy(xpath = "//body/app-root[1]/app-root[1]/app-home[1]/mat-sidenav-container[1]/mat-sidenav-content[1]/div[2]/div[1]/app-deployement-app[1]/div[1]/div[1]/div[1]/img[1]")
	WebElement refresh_btn;

	@FindBy(xpath = "//body/app-root[1]/app-root[1]/app-home[1]/mat-sidenav-container[1]/mat-sidenav-content[1]/div[2]/div[1]/app-deployement-app[1]/div[1]/div[1]/div[1]/img[3]")
	WebElement currentView;

	@FindBy(className = "mat-tooltip-trigger")
	WebElement i_mark;

	public void backDropShowing_Div_Click() {
		if (backDropShowing != null) {
			try {
				backDropShowing.click();
			} catch (Exception ex) {
			}
		}
	}

	public void backDropTransparent_Div_Click() {
		if (backDropTransparent != null) {
			try {
				backDropTransparent.click();
			} catch (Exception ex) {

			}
		}
	}

	public void verifyTitle() {
		ElementExist(Deploy_heading, getScreenshot());
	}

	public void verifyimark() {
		ElementExist(i_mark, getScreenshot());
	}

	public void refreshbtn() {
		refresh_btn.click();
	}

	public void currentView() {
		currentView.click();
	}

	public void deploymenttabclick() {
		deployment_tab.click();
	}

	public void listDeploymentTable() {

		// Example: Iterate through rows and print cell values
		for (WebElement row : deploymentTable.findElements(By.tagName("tr"))) {
			for (WebElement cell : row.findElements(By.tagName("td"))) {
				String cellcolumn = cell.getText();
				System.out.print(cell.getText() + "\t");
			}
			System.out.println();
		}

	}

	public void EdgeNameDeploymentInput(String value) {

		backDropTransparent_Div_Click();

		EdgeNameDeploymentInput.sendKeys(Keys.ENTER);
		EdgeNameDeploymentInput.sendKeys(value);

	}

	public void deploymenttoggle() {
		deploymenttoggle.click();
	}

	public void bulkDownloadImage() {
		bulkDownloadImage.click();
	}
}
